
-----------------
Project Templates
-----------------

Note: The default template for basic use is "Console Mode (and Windows)", which provides a standard C++ 
template for Console Mode (main()) and Pure Windows (WinMain()) applications.

The project templates contained in the directory "Visual Studio Project Templates" contain Visual Studio C++ templates
to create programs using Sagebox with paths and libraries set up for you.

There are two ways to make sure the projects will work correctly:

    1. Put your project in the path structure relative to Sagebox include and lib directories, as outlined below.
    2. Set the SageboxRoot Macro in the properties page to the Sagebox root (where the Sagebox lib and include
       directories reside).

Note: see a description of included projects below.

----------------------------------------
Directory Paths in the Project Templates
----------------------------------------

--> Default Project Directory Structure

    The default template structure is to look for Sagebox include, lib, and (optionally) Widget directories
    in the same root as your top-level Visual Studio projects directory.
    
    For example, with a project or solution named "New Project",  the directory structure is as follows:

        include            (Sagebox include directory)
        lib                (Sagebox lib directory)
        Widgets            (Sagebox Widgets directory)
        My Projects        (Your project or solution top directory)
         └───New Project   (Location of solution  (.sln) or project (.vcxproj)

    In this example, your project (or solution) file is located at "My Projects\New Project".

    The Sagebox directory "My Projects" is provided as a directory that will work with the provided templates,
    where you can create individual project directories that use Sagebox.

--> SageboxRoot Macro

    The best way to tell the project how to locate the Sagebox directories is to set the properties macro "SageboxRoot"
    to the location of the Sagebox directories.  
     
    For example, if the path to the Sagebox location is "c:\Code\Sagebox\git", set SageboxRoot to the same value,
    "c:\code\sagebox\git". 

    --> Editing The SageboxRoot macro

        The project templates provide a property file.  Do not Edit this file.  Instead, do the following:

            1. Open View->Other Windows->Property Manager

        Once the Property Manager appears:

            1. Click on the project
            2. Click on one of the project settings, i.e. Debug, Debug Optmized, etc.
            3. Double-Click on "PropertySheet".
               This will bring up the "PropertySheet Property Pages"
            4. Click on "User Macros" in the left panel
            5. Double Click on "SageboxRoot" and set the path to the Sagebox directory.

        When finished, the program will now compile with the project template.  
        The Property Sheet won't be saved until the Solution/Project is closed, and Microsoft 
        Visual Studio may ask if you want to save it (click "yes"). 

-----------------
Included Projects
-----------------

There are two main projects included, and in an experimental directory.

--> Console Mode (and Windows) Project

    This creates a standard C++ main() program and includes the code to create the main Sagebox Object 
    (CSagebox) and create a Sagebox Window.

    This runs in Console Mode, and it can be switch to Windows via a project setting.

    --> Windows Project Setting
        
        The Windows project setting turns the program into a pure Windows program without a console mode.  
        The WinMain() is provded in the WinMain.lib, which translates the input and then calls your main()

        *** No code needs to be changed to change from Console to Windows and vice-versa.  

        This provides a nice way to start in Console Mode with the Console Window for debug, etc., and 
        then switch to Windows.  

        This project setting also points out that the only difference between a Console Mode program and 
        Windows program is the Console Window and really nothing else. 
    
        You can use the Windows Project (described below) to use a WinMain() start, or simply remove WinMain.lib
        from this project and use your own WinMain().

--> Windows Project

    The Windows project template is a Pure Windows program with no Console Mode.  
    This is a canonical Windows program starting at WinMain(). 
    
    The template creates the CSagebox object and a Sagebox Window.

    This program can work as a pure event-driven program, a procedural program, or a mix.

    Once Sagebox is initialized, WinMain() can be used procedurally, just like a Console Mode program,
    but can also work with Windows events.

    In Windows, there is no real difference between a Console Mode program and Windows program, as a 
    Console Mode program is simply a Windows program that starts a thread and calls a function to launch the 
    Console Mode Window process.  

    The Windows project is provided to show that Sagebox can work with regular, canonical Windows programs, 
    as well as Console Mode, or a mixture. 

    As with a Console Mode project, you can use StopThread() in Sagebox to go pure event, driven.  
    See the documentation on StopThread() for more information

--> Sagebox Quick C++ (Experimental)

    The Sagebox Quick C++ project adds the Sagebox Quick C++ layer to Sagebox.  This allows easier approaches
    by automatically creating a global Sagebox and global window (and assorted utilities) with one call

            CreateQuickCpp();

    This is the only call that is needed, and allows creating programs quickly with the global "win.", so that any
    function can use it without worrying about Sagebox -- it's always there.

    In addition, the Windows update is set to automatically update as needed, without worrying about when and where 
    to update (where in Sagebox, the window sometimes needs to be updated). 

    The Process Window is opened automatically for quick exits when the program stalls.

    Also, Control-C is enabled, so that pressing Control-C immediately exits the program.

    These are all things you can set in Sagebox, but done automatically with one call.

    This allows more quick, non-OO approaches, which can aid quick development by not insisting on creating
    interfaces, or passing objects. 

    For example, this is an entire program:

            #include "CQuickCpp.h"

            int main()
            {
                CreateQuickCpp();
                SetFont(100);
                win.printf("Hello World");
            }

    There is also no exit code.  At the end, an exit button (in Windows mode) or console-based text message
    will be printed which will then look for the user's input, so the program doesn't just disappear 
    (you can call NoExitMsg() to disable this).

    This means short, quick-and-easy programs using Sagebox where much is taken care of automatically, 
    with an easy way to exit the program by pressing control-C or "Terminate Program" in the Process Window.




