{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil\fcharset0 Calibri;}{\f1\fnil\fcharset1 Segoe UI Symbol;}{\f2\fnil\fcharset2 Symbol;}}
{\colortbl ;\red0\green77\blue187;\red192\green80\blue77;\red0\green176\blue80;}
{\*\generator Riched20 10.0.19041}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\b\f0\fs40\lang9 Project Templates\b0\fs22\par
\cf1\i\fs20 Note: The default template for basic use is "Console Mode (and Windows)", which provides a standard C++ template for Console Mode (main()) and Pure Windows (WinMain()) applications.\par
\cf0\i0\fs22 The project templates contained in the directory "Visual Studio Project Templates" contain Visual Studio C++ templates to create programs using Sagebox with paths and libraries set up for you.\par
There are two ways to make sure the projects will work correctly:\par

\pard 
{\pntext\f0 1.\tab}{\*\pn\pnlvlbody\pnf0\pnindent0\pnstart1\pndec{\pntxta.}}
\fi-360\li720\sa200\sl276\slmult1 Put your project in the path structure relative to Sagebox include and lib directories, as outlined below.\par
{\pntext\f0 2.\tab}Set the \cf2\i SageboxRoot \cf0\i0 Macro in the properties page to the Sagebox root (where the Sagebox lib and include directories reside).\par

\pard\sa200\sl276\slmult1 Note: see a description of included projects below.\par
\par
\b\fs28 Directory Paths in the Project Templates\par
\fs24 Default Project Directory Structure\par
\b0\fs22 The default template structure is to look for Sagebox include, lib, and (optionally) Widget directories in the same root as your top-level Visual Studio projects directory.\par
For example, with a project or solution named \i "New Project\i0 ",  the directory structure is as follows:\par

\pard\li720\sa200\sl276\slmult1\cf2 include  \tab\tab (Sagebox include directory)\line lib \tab\tab\tab (Sagebox lib directory)\line Widgets \tab\tab (Sagebox Widgets directory)\line My Projects \tab\tab (Your project or solution top directory)\line       \f1\u9492?\u9472?\u9472?\u9472?\f0 New Project \tab (Location of solution  (.sln) or project (.vcxproj)\par

\pard\sa200\sl276\slmult1\cf0 In this example, your project (or solution) file is located at "\cf2\i My Projects\\New Project\cf0\i0 ".\par
The Sagebox directory \i "My Projects" \i0 is provided as a directory that will work with the provided templates, where you can create individual project directories that use Sagebox.\par
\b\fs24 SageboxRoot Macro\par
\b0\fs22 The best way to tell the project how to locate the Sagebox directories is to set the properties macro "\cf3\i SageboxRoot\cf0\i0 " to the location of the Sagebox directories.  \par
For example, if the path to the Sagebox location is \i "c:\\Code\\Sagebox\\git\i0 ", set \cf3\i SageboxRoot \cf0\i0 to the same value, \i "c:\\code\\sagebox\\git". \i0\par
\cf1 Editing The SageboxRoot macro\par
\cf0 The project templates provide a property file.  Do not Edit this file.  Instead, do the following:\par

\pard{\pntext\f2\'B7\tab}{\*\pn\pnlvlblt\pnf2\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\cf2 Open View->Other Windows->Property Manager\par

\pard\sa200\sl276\slmult1\cf0 Once the Property Manager appears:\par

\pard{\pntext\f2\'B7\tab}{\*\pn\pnlvlblt\pnf2\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\cf2 Click on the project\par
{\pntext\f2\'B7\tab}Click on one of the project settings, i.e. Debug, Debug Optmized, etc.\par
{\pntext\f2\'B7\tab}Double-Click on "PropertySheet"\line This will bring up the "PropertySheet Property Pages"\par
{\pntext\f2\'B7\tab}Click on "User Macros" in the left panel\par
{\pntext\f2\'B7\tab}Double Click on "\cf3\i SageboxRoot\cf2\i0 " and set the path to the Sagebox directory.\par

\pard\sa200\sl276\slmult1\cf0 When finished, the program will now compile with the project template.  The Property Sheet won't be saved until the Solution/Project is closed, and Microsoft Visual Studio may ask if you want to save it (click "yes"). \par
\par
\b\fs28 Included Projects\par
\b0\fs22 There are two main projects included, and in an experimental directory.\par
\par
\b\fs24 Console Mode (and Windows) Project\fs28\par
\b0\fs22 This creates a standard C++ main() program and includes the code to create the main Sagebox Object (CSagebox) and create a Sagebox Window.\par
This runs in Console Mode, and it can be switch to Windows via a project setting.\par
\cf1\b Windows Project Setting\par
\cf0\b0 The Windows project setting turns the program into a pure Windows program without a console mode.  The WinMain() is provded in the WinMain.lib, which translates the input and then calls your main()\par
\cf2\i No code needs to be changed to change from Console to Windows and vice-versa\cf0\i0 .  This provides a nice way to start in Console Mode with the Console Window for debug, etc., and then switch to Windows.  \par
This project setting also points out that the only difference between a Console Mode program and Windows program is the Console Window and really nothing else. \par
You can use the Windows Project (described below) to use a WinMain() start, or simply remove WinMain.lib from this project and use your own WinMain().\par
\b\fs28\par
\fs24 Windows Project\fs20\par
\b0\fs22 The Windows project template is a Pure Windows program with no Console Mode.  This is a canonical Windows program starting at WinMain(). \par
The template creates the CSagebox object and a Sagebox Window.\par
This program can work as a pure event-driven program, a procedural program, or a mix.\par
Once Sagebox is initialized, WinMain() can be used procedurally, just like a Console Mode program, but can also work with Windows events.\par
In Windows, there is no real difference between a Console Mode program and Windows program, as a Console Mode program is simply a Windows program that starts a thread and calls a function to launch the Console Mode Window process.  \par
The Windows project is provided to show that Sagebox can work with regular, canonical Windows programs, as well as Console Mode, or a mixture. \par
As with a Console Mode project, you can use StopThread() in Sagebox to go pure event, driven.  See the documentation on StopThread() for more information\par
\par
\b\fs24 Sagebox Quick C++ (Experimental)\b0\fs20\par
\fs22 The Sagebox Quick C++ project adds the Sagebox Quick C++ layer to Sagebox.  This allows easier approaches by automatically creating a global Sagebox and global window (and assorted utilities) with one call\par
CreateQuickCpp()\par
This is the only call that is needed, and allows creating programs quickly with the global "win.", so that any function can use it without worrying about Sagebox -- it's always there.\par
In addition, the Windows update is set to automatically update as needed, without worrying about when and where to update (where in Sagebox, the window sometimes needs to be updated). \par
The Process Window is opened automatically for quick exits when the program stalls.\par
Also, Control-C is enabled, so that pressing Control-C immediately exits the program.\par
These are all things you can set in Sagebox, but done automatically with one call.\par
\par
This allows more quick, non-OO approaches, which can aid quick development by not insisting on creating interfaces, or passing objects. \par
For example, this is an entire program:\par

\pard\li720\sa200\sl276\slmult1\cf2 #include "CQuickCpp.h"\par
int main()\line\{\line     CreateQuickCpp();\line     SetFont(100);\line    win.printf("Hello World");\line\}\par

\pard\sa200\sl276\slmult1\cf0 There is also no exit code.  At the end, an exit button (in Windows mode) or console-based text message will be printed which will then look for the user's input, so the program doesn't just disappear (you can call NoExitMsg() to disable this).\par
This means short, quick-and-easy programs using Sagebox where much is taken care of automatically, with an easy way to exit the program by pressing control-C or "Terminate Program" in the Process Window.\par
\par
\par
\par
\par
\par
}
 