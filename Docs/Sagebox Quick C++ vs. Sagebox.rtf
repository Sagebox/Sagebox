{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil\fcharset0 Calibri;}{\f1\fnil\fcharset0 Courier New;}{\f2\fnil\fcharset2 Symbol;}}
{\colortbl ;\red0\green176\blue80;\red0\green77\blue187;\red192\green80\blue77;}
{\*\generator Riched20 10.0.19041}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\b\f0\fs32\lang9 Differences between Sagebox and Sagebox Quick C++\b0\fs28\par
\b Sagebox Library (The main Sagebox Project)\par
\b0\fs22 The Sagebox Library is a collection of GUI-based and other tools for creative development and rapid prototyping. \par
Sagebox is aimed at hobbyists, non-professional and professional programmers that have experience in programming. \par
Sagebox purposely keeps in standard C++ space so that it doesn't create its own environment.  Where it does use Sagebox defined types  (such as \cf1\i CString\cf0\i0 , \cf1\i CPoint\cf0\i0 , \cf1\i RgbColor\cf0\i0 ) , these types convert to standard types (i.e\cf1\i . char *, POINT, RGB()\cf0\i0 )\i .  \i0 Sagebox functions take standard types (except for a couple exceptions), relying on Sagebox-defined types to convert themselves to standard types. \par
Sagebox is designed to work as a standalone program or included in existing projects. It can be its own development, or as a way to help the development of other programs, such as emulation, GUI display, input, or GUI-based help in developing library or Console Mode applications. \par
\cf2\b A sample Sagebox Program\par
\cf3\b0\f1\fs16 #include "CSagebox.h"\line #include <iostream>\tab\tab\tab\tab   // needed for std::cout\par
int main()\line\{\line     CSagebox cSagebox;\tab  \tab\tab   // Create Sagebox Object \line     auto& cWindow = cSagebox.NewWindow();\tab   // Create Window of default Size\line     SetFont(100);\tab\tab\tab\tab   // Set font("Arial,100");\line     cWin << "Hello World\\n";\tab\tab   // Send Big "Hello World"  to Window\line     std::cout << "Hello World\\n";\tab\tab   // Write Hello World to Console\line                                    \tab   // (if there is a console, \line\tab\tab\tab\tab\tab\tab   // as Sagebox works with Pure\line\tab\tab\tab\tab\tab\tab   // Windows programs, as well)\line     cWin.ExiButton();  \tab\tab\tab   // Get a button press so window\line\tab\tab\tab\tab\tab\tab   // won't close when program ends\line\cf0\}\par
\f0\fs22 The main idea is that Sagebox sets up an environment, in a Console Mode or Windows program that is standard C++ and provides a library of routines and an environment for quick development, which can be just for prototyping or a long-term project. \par
\par
\b\fs28 Sagebox Quick C++ Project\par
\b0\fs22 Sagebox Quick C++ is designed for easier non-OO programming (i.e. more C-Like), for easy learning, beginning-to-mid-level / hobbyists programming.\par
While Sagebox Quick C++ sets up some environmental items, the programs are pure C++, either Console Mode or Pure Windows. \par
The main idea is to make C++ programming very safe and easy like a scripting language, but with the power and speed of C++.\par
Sagebox Quick C++ is a layer on top of Sagebox.  Everything you can do in Sagebox, you can do in Sagebox Quick C++.\par
Sagebox Quick C++ sets up a number of things for you, to make programming easier (and hopefully more fun) -- these are all things that can be turned on with Sagebox, but are automatic in Sagebox Quick C++.\par
\cf2\b Sagebox Quick C++ Additives:\par

\pard{\pntext\f2\'B7\tab}{\*\pn\pnlvlblt\pnf2\pnindent0{\pntxtb\'B7}}\fi-360\li720\sa200\sl276\slmult1\cf3\b0 Creates a global window and other utilities that can be used anywhere.\line\cf0 This allows using "win" and other functions without having to establish an OO structure or pass the window from function to function.\line\line The created window is initially hidden and appears when you use it.  You can also make it visible with the "win.Show()" function.\par
{\pntext\f2\'B7\tab}\cf3 Graphics functions are updated for you, but still remain extremely fast.  \cf0 With Sagebox, this is an option, but the default option gives you more control where graphics are updated when possible, but you occasionally have to do it yourself with an Update() function to ensure the screen is updated -- this is a sold Windows/GUI concept that isn't needed in many programs.\line\line Sagebox has a very detailed algorithm to ensure graphics update without slowing down the graphics display. \par
{\pntext\f2\'B7\tab}\cf3 Process Window.  \cf0 Sagebox Quick C++ launches the Process Window that allows you to exit the program at any time.  With C++, the program can sometimes get caught in a loop, or the Windows can be hidden with no way to get it back.\line\line With the Process Window, you can put the mouse in the upper-right-hand corner of the screen and terminate the program at any time.  This makes programming much easier to think about.\par
{\pntext\f2\'B7\tab}\cf3 Control-C Terminates the Program, even if Pure Windows.  \cf0 With regular Console Mode programs, Control-C will terminate the program, even if the program is not responding. \line\line But what about GUI-based programs?  With Sagebox Quick C++, you can press Control-C in an input box or at any time in the program and it will terminate the program, just as with a Console Mode WIndow.\line\line This feature allows a lot of control while developing or just playing around with programs. \line\line This can be turned off in Sagebox Quick C++, and in Sagebox, this is can be turned on manually.\par
{\pntext\f2\'B7\tab}\cf3 Focuses on Procedural Programming vs. Event-Driven.   \cf0 Sagebox does this, too, but there are plenty of Sagebox examples that are event-driven.  The Sagebox Widgets (used by Sagebox Quick C++, too), are written with Sagebox and are purely event-driven except for the interface for procedural programs. Other Sagebox examples, too, have a number of events that are handled as events and not procedurally.\line\line Sagebox Quick C++ can also work with events, but the main focus is simple, procedural programming.  See the example below.\par
{\pntext\f2\'B7\tab}\cf3 Easy C++ Examples.  \cf0 One of the main goals of Sagebox Quick C++ is to help people understand how C++ works at a function-by-function level, and to provide simple (and sometimes less simple) example showing how C++ works, but also how we can use that to create some great stuff using graphics and events. \par
{\pntext\f2\'B7\tab}\cf3 Sagebox Quick C++ Sandbox.\cf0  The Sandbox mode creates the Sagebox Quick C++ environment for you, so no extra code is needed -- programs start just as standard C++, and you can use the Sagebox Quick C++ functions at any time.\line\line The Sagebox Quick C++ Sandbox is a pure Windows program, and the stdio (i.e. printf, cout, cin, etc.) are re-routed to the main Sagebox Quick C++ window.    This allows writing a basic C/C++ program with standard I/O (i.e. stdio) functions while mixing GUI functions in the same Window.\line\line Still somewhat experimental (and labeled "experimental"), the main goal for the Sandbox mode is as both a learning tool and a way to have fun with programming; to create a more script-like environment similar to how the BASIC language use to allow people to learn and have fun with programming, without making it complicated, but with all of the power and speed of C/C++.\par

\pard\sa200\sl276\slmult1\par

\pard\sa200\sl276\slmult1\cf2\b Sagebox Quick C++ Program Example\par
\cf0\b0 Below is an example of Sagebox Quick C++.  This is the same example as above, but note that there is only one call to CreateQuickCpp(), and the rest is regular C++ code:\par
\cf3\f1\fs16 #include "CQuickCpp.h"\par
int main()\line\{\line     CreateQuickCpp()\tab\tab   \tab // Create Sagebox Quick C++ environment.\line     SetFont(100);\tab\tab   \tab // Set font("Arial,100");\line     win << "Hello World\\n";\tab   \tab // Send Big "Hello World"  to Window\line     cout << "Hello World\\n";\tab // Write Hello World to Console\line                           \tab   \tab // (if there is a console, as Sagebox works\line\tab\tab\tab\tab\tab // with Pure Windows programs, as well)\line\}\par
\cf0\f0\fs22 Notes on the above example:\par

\pard 
{\pntext\f0 1.\tab}{\*\pn\pnlvlbody\pnf0\pnindent0\pnstart1\pndec{\pntxta.}}
\fi-360\li720\sa200\sl276\slmult1 In the Sagebox C++ Sandbox version, the \i "std::cout" \i0 would go to the Sagebox Window, since there would be no Console Window and the cout output buffer has been re-routed to the Sagebox Window\par
{\pntext\f0 2.\tab}There is \i no \cf1 ExitButton() \cf0\i0 call.  When the program is finished, Sagebox Quick C++ automatically puts up a button (when in Windows), or a Console Window Message and waits for a return press. (Note this can be turned off with the function NoExitMsg() prior to program ending).\par
{\pntext\f0 3.\tab}Notice that \i <iostream> \i0 is no longer included, and \i "std::cout\i0 " is now cout.  Sagebox Quick C++ includes <\i iostream\i0 > and sets using namespace std.\par
{\pntext\f0 4.\tab}In the Project labeled "experimental" , the line "\cf1\i CreateQuckCpp()\cf0\i0 "  is not needed, and programs can start just as regular C++ programs with no preamble code.\par
{\pntext\f0 5.\tab}There are any more differences that make Sagebox Quick C++ simpler than Sagebox.  See the examples directories for more samples.\par

\pard\sa200\sl276\slmult1\par
}
 